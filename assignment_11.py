# -*- coding: utf-8 -*-
"""assignment 11

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aH-pWVvl77ur-GMHsnq2QydVfffM-LsI
"""

#solution 1
def mySqrt(x):
    if x == 0:
        return 0

    left, right = 1, x

    while left <= right:
        mid = left + (right - left) // 2
        if mid * mid > x:
            right = mid - 1
        elif mid * mid < x:
            left = mid + 1
        else:
            return mid

    return right

#2solution

def findPeakElement(nums):
    left, right = 0, len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] < nums[mid + 1]:
            left = mid + 1
        else:
            right = mid

    return left


nums = [1, 2, 3, 1]
print(findPeakElement(nums))

#solution3

def missingNumber(nums):
    n = len(nums)
    missing = n  # Initialize missing as n since n is the only number missing from the range [0, n]

    for i in range(n):
        missing ^= i ^ nums[i]  # XOR operation

    return missing

# Example usage
nums = [3, 0, 1]
print(missingNumber(nums))

#solution4

def findDuplicate(nums):
    slow = nums[0]  # Tortoise
    fast = nums[0]  # Hare

    # Move slow by 1 step and fast by 2 steps until they meet inside the cycle
    while True:
        slow = nums[slow]  # Move by 1 step
        fast = nums[nums[fast]]  # Move by 2 steps
        if slow == fast:
            break


    slow = nums[0]
    while slow != fast:
        slow = nums[slow]
        fast = nums[fast]

    return slow

nums = [1, 3, 4, 2, 2]
print(findDuplicate(nums))

#5 solution

def intersection(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)

    return list(set1.intersection(set2))


nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
print(intersection(nums1, nums2))

#6 solution

def findMin(nums):
    left, right = 0, len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid

    return nums[left]


nums = [4, 5, 6, 7, 0, 1, 2]
print(findMin(nums))

